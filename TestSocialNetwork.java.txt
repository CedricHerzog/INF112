/************************************************************** Test **********************************************************************************/
package test;

public class Test {
    
    
	   public static void main(String[] args) {
           
		   /* On instancie la variable resultats qui sera passée en paramètre des tests et qui 
		    * contient dans l'ordre le nombre d'test et d'erreur.
		    * 
		    * Cette variable doit être un String car le main prend forcément un 
		    * tableau de String en paramètre
		    * 
		    * Si on essaie avec un tableau de int, la signature ne correspondra pas avec la signature 
		    * requise par la JVM, et le code plantera lors de l'éxécution
		    * */
		   
           String [] resultats = new String[] {"0", "0"};
           
           //Lancement du test d'initialisation
           TestsInitialisation.main(resultats);
           System.out.println("\n\n ***************************************\n");
           
           //Lancement du test d'ajout de membre
           TestsAddMember.main(resultats);
           System.out.println("\n\n ***************************************\n");
           
           //Lancement du test d'ajout de film
           TestAddItemFilm.main(resultats);
           System.out.println("\n\n ***************************************\n");
           
           //Lancement du test de commentaire
           TestReviewItemFilm.main(resultats);
           
           System.out.println("\n\n ***************************************\n");
           
                      
           System.out.println("Bilan des Tests :   " + resultats[1] +
                              " erreur(s) / " +  resultats[0] + " tests effectués");
           
       }
    
}

/******************************************************************** TestInitialisation **********************************************************************/


package test;

import java.util.LinkedList;

import avis.SocialNetwork;
import exception.BadEntry;
import exception.ItemFilmAlreadyExists;
import exception.ItemBookAlreadyExists;
import exception.MemberAlreadyExists;
import exception.NotItem;
import exception.NotMember;

/** 
 * @author B. Prou
 * @date mars 2011
 * @version V0.6
 */

public class TestsInitialisation {


	public static void main(String[] args) {
		// TODO Auto-generated method stub

		int nbMembres = 0;
		int nbLivres = 0;
		int nbFilms = 0;

		int nbTests = 0;
		int nbErreurs = 0;
		
		System.out.println("Tests  initialisation  réseau social  ");
	
		
		try {

			// un réseau social créé ne doit avoir ni membres ni items
			//on test la création et on incrémente le nombre de test
			nbTests++;
			SocialNetwork sn = new SocialNetwork();
			
			//Si on entre dans un des if, c'est qu'il y a une erreur.
			//On incrémentera donc le nombre d'erreur
			if (sn.nbMembers()!= 0) {
				nbErreurs++;
				System.out.println("Erreur 0.1 :  le nombre de membres après création du réseau est non nul");
				System.exit(1);
			}
			if (sn.nbBooks() != 0) {
				nbErreurs++;
				System.out.println("Erreur 0.2 : le nombre de livres après création du réseau est non nul");
				System.exit(1);
			}
			if (sn.nbFilms() != 0) {
				nbErreurs++;
				System.out.println("Erreur 0.3 : le nombre de films après création du réseau est non nul");
				System.exit(1);
			}

			
			// ce n'est pas du test, mais cela peut "rassurer"...
			System.out.println(sn);
			
		}
		//Si on entre dans le catch, c'est qu'il y a une erreur, donc incrémentation du nbErreurs
		catch (Exception e) {
			nbErreurs++;
			System.out.println("Exception non prévue : " + e);
			e.printStackTrace();
			System.exit(1);
		}
		
		//On modifie l'argument qui sera utilisé dans le prochain test
		if ((args != null) && (args.length == 2)) {        
            nbTests = nbTests + new Integer(args[0]);
            nbErreurs = nbErreurs + new Integer(args[1]);       
            args[0] = "" + nbTests;
            args[1] = "" + nbErreurs;
         }
	}

	
}


/*************************************************************************** TestsAddMember *********************************************************************************/

package test;

import java.util.LinkedList;

import avis.SocialNetwork;
import exception.BadEntry;
import exception.ItemFilmAlreadyExists;
import exception.ItemBookAlreadyExists;
import exception.MemberAlreadyExists;
import exception.NotItem;
import exception.NotMember;

/** 
 * @author B. Prou, E. Cousin
 * @date mars 2015
 * @version V1.0
 */

public class TestsAddMember {



	public static int addMemberBadEntryTest (SocialNetwork sn, String pseudo, String pwd, String profil, String idTest, String messErreur){
		// vérifie que l'ajout d'un membre (pseudo, pwd, profil) est refusée (levée de l'exception BadEntry et  pas de modification du sn)
		// si c'est bien le cas, ne fait rien
		// sinon, affiche le message d'erreur passé en paramètre
		int nbMembres = sn.nbMembers();
		try {
			sn.addMember (pseudo, pwd, profil);
			System.out.println ("Test " + idTest + " : " + messErreur);
			return 1;
		}
		catch (BadEntry e) {
			if (sn.nbMembers() != nbMembres) {
				System.out.println("Test " + idTest + " : l'exception BadEntry a bien été levée mais le nombre de membres a été modifié");
				return 1;
			}
			else 
				return 0;
		}
		catch (Exception e) {
			System.out.println ("Test " + idTest + " : exception non prévue. " + e); 
			e.printStackTrace();
			return 1;
		}
	}

	public static int addMemberOKTest (SocialNetwork sn, String pseudo, String pwd, String profil, String idTest){
		int nbMembres = sn.nbMembers();
		try{
			sn.addMember (pseudo, pwd, profil);
			if (sn.nbMembers() != nbMembres+1) {
				System.out.println("Test " + idTest + " :  le nombre de membres n'a pas été correctement incrémenté");
				return 1;
			}
			else 
				return 0;
		}
		catch (Exception e) {
			System.out.println ("Test " + idTest + " : exception non prévue. " + e); 
			e.printStackTrace();
			return 1;
		}
	}

	public static int addMemberAlreadyExistsTest (SocialNetwork sn, String pseudo, String pwd, String profil, String idTest, String messErreur){
		int nbMembres = sn.nbMembers();
		try {
			sn.addMember (pseudo, pwd, profil);
			System.out.println ("Test " + idTest + " : " + messErreur);
			return 1;
		}
		catch (MemberAlreadyExists e) {
			if (sn.nbMembers() != nbMembres) {
				System.out.println("Test " + idTest + " : l'exception MemberAlreadyExists a bien été levée mais le nombre de membres a été modifié");
				return 1;
			}
			else
				return 0;
		}
		catch (Exception e) {
			System.out.println ("Test " + idTest + " : exception non prévue. " + e); 
			e.printStackTrace();
			return 1;
		}
	}




	public static void main(String[] args) {

		int nbLivres = 0;
		int nbFilms = 0;

		int nbTests = 0;
		int nbErreurs = 0;
		
		System.out.println("Tests  ajouter des membres au réseau social  ");


		SocialNetwork sn = new SocialNetwork();

		// tests de addMember
		nbFilms = sn.nbFilms();
		nbLivres = sn.nbBooks();

		// <=> fiche numéro 1

		// tentative d'ajout de membres avec entrées "incorrectes"

		nbTests++;
		nbErreurs += addMemberBadEntryTest ( sn, null, "qsdfgh", "", "1.1", "L'ajout d'un membre dont le pseudo n'est pas instancié est accepté");
		nbTests++;
		nbErreurs += addMemberBadEntryTest ( sn, " ", "qsdfgh", "", "1.2", "L'ajout d'un membre dont le pseudo ne contient pas un caracteres, autre que des espaces, est accepté");
		nbTests++;
		nbErreurs += addMemberBadEntryTest ( sn, "B", null, "", "1.3", "L'ajout d'un membre dont le password n'est pas instancié est accepté");
		nbTests++;
		nbErreurs += addMemberBadEntryTest ( sn, "B", "   qwd ", "", "1.4", "L'ajout d'un membre dont le password ne contient pas au moins 4 caracteres, autre que des espaces de début ou de fin, est accepté");
		nbTests++;
		nbErreurs += addMemberBadEntryTest ( sn, "BBBB", "bbbb", null, "1.5", "L'ajout d'un membre dont le profil n'est pas instancié est accepté");



		// <=> fiche numéro 2

		// ajout de 3 membres avec entrées "correctes"

		nbTests++;
		nbErreurs += addMemberOKTest (sn, "Paul", "paul", "lecteur impulsif","2.1a");
		nbTests++;
		nbErreurs += addMemberOKTest (sn, "Antoine", "antoine", "grand amoureux de la littérature","2.1b");
		nbTests++;
		nbErreurs += addMemberOKTest (sn, "Alice", "alice", "20 ans, sexy","2.1c");

		// tentative d'ajout de membre "existant"

		nbTests++;
		nbErreurs += addMemberAlreadyExistsTest(sn, new String("Paul"), "abcdefghij", "", "2.2", "L'ajout d'un membre avec le pseudo du premier membre ajouté est accepté");
		nbTests++;
		nbErreurs += addMemberAlreadyExistsTest(sn, new String("Alice"), "abcdefghij", "", "2.3", "L'ajout d'un membre avec le pseudo du dernier membre ajouté est accepté");
		nbTests++;
		nbErreurs += addMemberAlreadyExistsTest(sn, new String("anToine"), "abcdefghij", "", "2.4", "L'ajout d'un membre avec un pseudo existant (avec casse différente) est accepté");
		nbTests++;
		nbErreurs += addMemberAlreadyExistsTest(sn, new String(" Antoine "), "abcdefghij", "", "2.5", "L'ajout d'un membre avec un pseudo existant (avec leading et trailing blanks) est accepté");		


		nbTests++;
		if (nbFilms != sn.nbFilms()) {
			System.out.println("Erreur  :  le nombre de films après utilisation de addMember a été modifié");
			nbErreurs++;
		}
		nbTests++;
		if (nbLivres != sn.nbBooks()) {
			System.out.println("Erreur  :  le nombre de livres après utilisation de addMember a été modifié");	
			nbErreurs++;
		}

		// ce n'est pas du test, mais cela peut "rassurer"...
		System.out.println(sn);

		// bilan du test de addMember
		System.out.println("TestsAddMember :   " + nbErreurs + " erreur(s) / " +  nbTests + " tests effectués");
		
		//On modifie l'argument qui sera utilisé dans le prochain test
		if ((args != null) && (args.length == 2)) {        
            nbTests = nbTests + new Integer(args[0]);
            nbErreurs = nbErreurs + new Integer(args[1]);       
            args[0] = "" + nbTests;
            args[1] = "" + nbErreurs;
         }
	}
}



/******************************************************************************* TestAddItemFilm **************************************************************/

package test;

import avis.SocialNetwork;
import exception.BadEntry;
import exception.ItemFilmAlreadyExists;
import exception.MemberAlreadyExists;
import exception.NotMember;
/** 
 * @author C. Manda, C. Herzog
 * @date avril 2015
 * @version V1.0
 */

public class TestAddItemFilm {
	
	public static int addItemFilmBadEntryTest (SocialNetwork sn, String pseudo, String pwd, String titre, String genre, String realisateur, String scenariste, int duree, String idTest, String messErreur){
		// vérifie que l'ajout d'un film (pseudo, pwd, titre, genre, realisateur, scenariste, duree) est refusée (levée de l'exception BadEntry et  pas de modification du sn)
		// si c'est bien le cas, ne fait rien
		// sinon, affiche le message d'erreur passé en paramètre
		int nbFilms = sn.nbFilms();
		try {
			sn.addItemFilm (pseudo, pwd, titre, genre, realisateur, scenariste, duree);
			System.out.println ("Test " + idTest + " : " + messErreur);
			return 1;
		}
		catch (BadEntry e) {
			if (sn.nbFilms() != nbFilms) {
				System.out.println("Test " + idTest + " : l'exception BadEntry a bien été levée mais le nombre de films a été modifié");
				return 1;
			}
			else 
				return 0;
		}
		catch (Exception e) {
			System.out.println ("Test " + idTest + " : exception non prévue. " + e); 
			e.printStackTrace();
			return 1;
		}
	}

	public static int addItemFilmOKTest (SocialNetwork sn, String pseudo, String pwd, String titre, String genre, String realisateur, String scenariste, int duree, String idTest){
		int nbFilms = sn.nbFilms();
		try{
			sn.addItemFilm (pseudo, pwd, titre, genre, realisateur, scenariste, duree);
			if (sn.nbFilms() != nbFilms+1) {
				System.out.println("Test " + idTest + " :  le nombre de itemFilms n'a pas été correctement incrémenté");
				return 1;
			}
			else 
				return 0;
		}
		catch (Exception e) {
			System.out.println ("Test " + idTest + " : exception non prévue. " + e); 
			e.printStackTrace();
			return 1;
		}
	}

	public static int addItemFilmAlreadyExistsTest (SocialNetwork sn, String pseudo, String pwd, String titre, String genre, String realisateur, String scenariste, int duree, String idTest, String messErreur){
		int nbFilms = sn.nbFilms();
		try {
			sn.addItemFilm (pseudo, pwd, titre, genre, realisateur, scenariste, duree);
			System.out.println ("Test " + idTest + " : " + messErreur);
			return 1;
		}
		catch (ItemFilmAlreadyExists e) {
			if (sn.nbFilms() != nbFilms) {
				System.out.println("Test " + idTest + " : l'exception ItemFilmAlreadyExists a bien été levée mais le nombre de itemFilms a été modifié");
				return 1;
			}
			else
				return 0;
		}
		catch (Exception e) {
			System.out.println ("Test " + idTest + " : exception non prévue. " + e); 
			e.printStackTrace();
			return 1;
		}
	}
	
	public static int addItemFilmNotMemberTest (SocialNetwork sn, String pseudo, String pwd, String titre, String genre, String realisateur, String scenariste, int duree, String idTest, String messErreur){
		int nbFilms = sn.nbFilms();
		try {
			sn.addItemFilm (pseudo, pwd, titre, genre, realisateur, scenariste, duree);
			System.out.println ("Test " + idTest + " : " + messErreur);
			return 1;
		}
		catch (NotMember e) {
			if (sn.nbFilms() != nbFilms) {
				System.out.println("Test " + idTest + " : l'exception ItemFilmAlreadyExists a bien été levée mais le nombre de itemFilms a été modifié");
				return 1;
			}
			else
				return 0;
		}
		catch (Exception e) {
			System.out.println ("Test " + idTest + " : exception non prévue. " + e); 
			e.printStackTrace();
			return 1;
		}
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int nbLivres = 0;
		int nbFilms = 0;
		int nbMembres = 0;

		int nbTests = 0;
		int nbErreurs = 0;
		
		System.out.println("Tests  ajouter des itemFilms au réseau social  ");


		SocialNetwork sn = new SocialNetwork();

		
		
		//Instanciation de membres
		try {
			sn.addMember("Antoine", "antoine", "grand amoureux de la littérature");
			sn.addMember("Alice", "alice", "20 ans, sexy");
			sn.addMember("Paul", "paul", "lecteur impulsif");
		} catch (BadEntry e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (MemberAlreadyExists e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		// tests de additemFilm
				nbLivres = sn.nbBooks();
				nbMembres = sn.nbMembers();

		// <=> fiche numéro 3

		// tentative d'ajout de itemFilms avec entrées "incorrectes"

		nbTests++;
		nbErreurs += addItemFilmBadEntryTest ( sn, null, "antoine", "a", "", "", "", 1, "3.1", "L'ajout d'un itemFilm dont le pseudo n'est pas instancié est accepté");
		nbTests++;
		nbErreurs += addItemFilmBadEntryTest ( sn, " ", "antoine", "a", "", "", "", 1, "3.2", "L'ajout d'un itemFilm dont le pseudo ne contient que des espaces est accepté");
		nbTests++;
		nbErreurs += addItemFilmBadEntryTest ( sn, "Antoine", null, "a", "", "", "", 1, "3.3", "L'ajout d'un itemFilm dont le password n'est pas instancié est accepté");
		nbTests++;
		nbErreurs += addItemFilmBadEntryTest ( sn, "Antoine", "   qwd", "a", "", "", "", 1, "3.4", "L'ajout d'un itemFilm dont le password a moins de 4 caratères et est accepté");
		nbTests++;
		nbErreurs += addItemFilmBadEntryTest ( sn, "Antoine", "antoine", null, "", "", "", 1, "3.5", "L'ajout d'un itemFilm dont le titre n'est pas instancié est accepté");
		nbTests++;
		nbErreurs += addItemFilmBadEntryTest ( sn, "Antoine", "antoine", " ", "", "", "", 1, "3.6", "L'ajout d'un itemFilm dont le titre ne contient que des espaces est accepté");
		nbTests++;
		nbErreurs += addItemFilmBadEntryTest ( sn, "Antoine", "antoine", "a", null, "", "", 1, "3.7", "L'ajout d'un itemFilm dont le genre n'est pas instancié est accepté");
		nbTests++;
		nbErreurs += addItemFilmBadEntryTest ( sn, "Antoine", "antoine", "a", "", null, "", 1, "3.8", "L'ajout d'un itemFilm dont le réalisateur n'est pas instancié est accepté");
		nbTests++;
		nbErreurs += addItemFilmBadEntryTest ( sn, "Antoine", "antoine", "a", "", "", null, 1, "3.9", "L'ajout d'un itemFilm dont le scénariste n'est pas instancié est accepté");
		nbTests++;
		nbErreurs += addItemFilmBadEntryTest ( sn, "Antoine", "antoine", "a", "", "", "", 0, "3.10", "L'ajout d'un itemFilm dont la durée non positive est accepté");


		// <=> fiche numéro 4

		// ajout de 3 itemFilms avec entrées "correctes"

		nbTests++;
		nbErreurs += addItemFilmOKTest (sn, "Paul", "paul", "Jurassic Park", "", "", "", 1, "4.1a");
		nbTests++;
		nbErreurs += addItemFilmOKTest (sn, "Antoine", "antoine", "Star Wars", "", "", "", 1, "4.1b");
		nbTests++;
		nbErreurs += addItemFilmOKTest (sn, "Alice", "alice", "Back to the Future", "", "", "", 1, "4.1c");

		// tentative d'ajout de membre "existant"

		nbTests++;
		nbErreurs += addItemFilmAlreadyExistsTest(sn, "Paul", "paul", new String("Jurassic Park"), "", "", "", 1, "4.2", "L'ajout d'un itemFilm avec le titre du premier itemFilm ajouté est accepté");
		nbTests++;
		nbErreurs += addItemFilmAlreadyExistsTest(sn, "Alice", "alice",  new String("Back to the Future"), "", "", "", 1, "4.3", "L'ajout d'un itemFilm avec le titre du dernier itemFilm ajouté est accepté");
		nbTests++;
		nbErreurs += addItemFilmAlreadyExistsTest(sn, "Antoine", "antoine", new String("staR warS"), "", "", "", 1, "4.4", "L'ajout d'un itemFilm  avec un titre existant (avec casse différente) est accepté");
		nbTests++;
		nbErreurs += addItemFilmAlreadyExistsTest(sn, "Antoine", "antoine", new String(" Star Wars "), "", "", "", 1, "4.5", "L'ajout d'un itemFilm avec un titre existant (avec leading et trailing blanks) est accepté");

		// tentative d'ajout de itemFilm avec un mauvais membre
		nbTests++;
		nbErreurs += addItemFilmNotMemberTest(sn, "Michel", "paul", "Lord of the Ring", "", "", "", 1, "4.6", "L'ajout d'un itemFilm avec un mauvais membre est accepté");
		nbTests++;
		nbErreurs += addItemFilmNotMemberTest(sn, "Paul", "antoine", "Harry Potter", "", "", "", 1, "4.7", "L'ajout d'un itemFilm avec un pseudo est un password qui ne correspondent pas est accepté");
		
		nbTests++;
		if (nbLivres != sn.nbBooks()) {
			System.out.println("Erreur  :  le nombre de livres après utilisation de addItemFilm a été modifié");	
			nbErreurs++;
		}
		nbTests++;
		if (nbMembres != sn.nbMembers()) {
			System.out.println("Erreur  :  le nombre de membres après utilisation de addItemFilm a été modifié");	
			nbErreurs++;
		}

		// ce n'est pas du test, mais cela peut "rassurer"...
		System.out.println(sn);

		// bilan du test de addItemFilm
		System.out.println("TestsAddItemFilm :   " + nbErreurs + " erreur(s) / " +  nbTests + " tests effectués");

		//On modifie l'argument qui sera utilisé dans le prochain test
		//Comme l'argument est de type string, on doit effectuer des conversion de type
		if ((args != null) && (args.length == 2)) {        
            nbTests = nbTests + new Integer(args[0]);
            nbErreurs = nbErreurs + new Integer(args[1]);       
            args[0] = "" + nbTests;
            args[1] = "" + nbErreurs;
         }
	}
}



/********************************************************************** TestReviewItemFilm ***************************************************************************/

package test;

import exception.BadEntry;
import exception.NotItem;
import exception.NotMember;
import avis.SocialNetwork;

/** 
 * @author C. Manda, C. Herzog
 * @date avril 2015
 * @version V1.0
 */

public class TestReviewItemFilm {
	
		/**
		*											Test fonction reviewItemFilm :
		*
		* Les différentes méthodes vérifient que la review d'un film (pseudo, pwd, profil) est refusée (levée de l'exception BadEntry)
		* Si c'est bien le cas, ne fait rien
		* Sinon, affiche le message d'erreur passé en paramètre
		* 
		* @param sn social network
		* @param pseudo pseudo du membre émettant l'opinion
		* @param password son mot de passe
		* @param titre titre du film  concerné
		* @param note la note qu'il donne au film 
		* @param commentaire ses commentaires
		* @param idTest l'id octroyé au test
		* @param messErreur le message d'erreur à afficher
		* 		
		* @return 1 si une anomalie est trouvée, 0 sinon (exception conforme détectée)
		*/
	
	public static int reviewItemFilmBadEntryTest (SocialNetwork sn, String pseudo, String password, String titre, float note, String commentaire, String idTest, String messErreur){
	// Test la levée d'exception BadEntry
		try {
			sn.reviewItemFilm(pseudo, password, titre, note, commentaire);
			System.out.println ("Test " + idTest + " : " + messErreur);
			// Aucune exception levée, retourne donc 1
			return 1;
		}
		catch (BadEntry e ) {
			// L'exception BadEntry est levée, retourne donc 0
			return 0;
		}
		
		catch (Exception e){
			System.out.println ("Test " + idTest + " : exception non prévue. " + e); 
			e.printStackTrace();
			// Une autre exception est levée que BadEntry,retourne donc 1
			return 1;
		}
	}
	
	public static int reviewItemFilmNotMemberTest (SocialNetwork sn, String pseudo, String password, String titre, float note, String commentaire, String idTest, String messErreur){
	// Test la levée d'exception NotMember
		try {
			sn.reviewItemFilm(pseudo, password, titre, note, commentaire);
			System.out.println ("Test " + idTest + " : " + messErreur);
			// Aucune exception levée, retourne donc 1
			return 1;
		}
		catch (NotMember e ) {
			// L'exception NotMember est levée, retourne donc 0
			return 0;
		}
		
		catch (Exception e){
			System.out.println ("Test " + idTest + " : exception non prévue. " + e); 
			e.printStackTrace();
			// Une autre exception est levée que NotMember,retourne donc 1
			return 1;
		}
	}
	
	public static int reviewItemFilmNotItemTest (SocialNetwork sn, String pseudo, String password, String titre, float note, String commentaire, String idTest, String messErreur){
		// Test la levée d'exception NotItem
			try {
				sn.reviewItemFilm(pseudo, password, titre, note, commentaire);
				System.out.println ("Test " + idTest + " : " + messErreur);
				// Aucune exception levée, retourne donc 1
				return 1;
			}
			catch (NotItem e ) {
				// L'exception NotItem est levée, retourne donc 0
				return 0;
			}
			
			catch (Exception e){
				System.out.println ("Test " + idTest + " : exception non prévue. " + e); 
				e.printStackTrace();
				// Une autre exception est levée que NotItem,retourne donc 1
				return 1;
			}
		}
	
	public static int reviewItemFilmOKTest (SocialNetwork sn, String pseudo, String password, String titre, float note, String commentaire, String idTest, float moyennedesiree){
		// @param  moyenne 
		float moyenne;
		try{
			moyenne=sn.reviewItemFilm (pseudo, password, titre, note, commentaire);
			if (moyenne!=moyennedesiree )
			{
				System.out.println ("Test " + idTest + " : La valeur de la moyenne de l'ItemFilm est différente de celle attendue");
				// Moyenne différente de celle attendue, retourne donc 1
				return 1;
			}
			else
			{
				return 0;
			}

		}
		catch (Exception e) {
			System.out.println ("Test " + idTest + " : exception non prévue. " + e); 
			e.printStackTrace();
			return 1;
		}
	}
	
	/* *************************************************************************************************************************************************************************** */
	
	public static void main(String[] args) {
		
		System.out.println("Tests  ajouter review à itemFilms au réseau social  ");
		SocialNetwork sn = new SocialNetwork();
		int nbTests = 0;
		int nbErreurs = 0;
	
		// Initialisation :
		try{
		sn.addMember("Paul", "paul", "Disneyland aussi a eu quelques difficultés à ses débuts !");
		sn.addMember("Antoine", "antoine", "Que la Force soit avec toi.");
		sn.addMember("Paul", "paul", "Quitte à voyager dans le temps au volant d'une voiture, autant en choisir une qui ait de la gueule !");

		sn.addItemFilm ("Paul", "paul", "Jurassic Park", "", "", "", 1);
		sn.addItemFilm ("Antoine", "antoine", "Star Wars", "", "", "", 1);
		sn.addItemFilm ("Alice", "alice", "Back to the Future", "", "", "", 1);
		}
		catch (Exception e){
			System.out.println("Paramètres incorrects lors de la création de membres et de films. Voir tests associés. ");
			System.exit(1);
		}
		
		int nbFilms = sn.nbFilms();
		int nbBooks = sn.nbBooks();
		int nbMembers = sn.nbMembers();


		// <=> fiche numéro 5

		// tentative d'ajout de review avec entrées "incorrectes"
		nbTests++;
		nbErreurs += reviewItemFilmBadEntryTest ( sn, null, "paul", "Titre", 1, "Bien", "5.01", "L'ajout d'une review avec un pseudo non instancié est accepté");
		nbTests++;
		nbErreurs += reviewItemFilmBadEntryTest ( sn,"     ", "paul", "Titre", 1, "Bien", "5.02", "L'ajout d'une review avec un pseudo qui ne contient que des espaces est accepté");
		nbTests++;
		nbErreurs += reviewItemFilmBadEntryTest ( sn, "Paul", null, "Titre", 1, "Bien", "5.03", "L'ajout d'une review avec un password non instancié est accepté");
		nbTests++;
		nbErreurs += reviewItemFilmBadEntryTest ( sn,"Paul", "non", "Titre", 1, "Bien", "5.04", "L'ajout d'une review  avec un password de moins de 4 caractères est accepté");
		nbTests++;
		nbErreurs += reviewItemFilmBadEntryTest ( sn, "Paul", "paul", null, 1, "Bien", "5.05", "L'ajout d'une review avec un titre non instancié est accepté");
		nbTests++;
		nbErreurs += reviewItemFilmBadEntryTest ( sn, "Paul", "paul", "      ", 1, "Bien", "5.06", "L'ajout d'une review avec un titre qui ne contient que des espaces est accepté");
		nbTests++;
		nbErreurs += reviewItemFilmBadEntryTest ( sn,"Paul", "paul", "Titre", 10, "Bien", "5.07", "L'ajout d'une review avec une note non comprise entre 0 et 5 est accepté");
		nbTests++;
		nbErreurs += reviewItemFilmBadEntryTest ( sn,"Paul", "paul", "Titre", 1, null, "5.08", "L'ajout d'une review avec un commentaire non instancié est accepté");


		// <=> fiche numéro 6

		// tentative d'ajout de review avec entrées "correctes"
		nbTests++;
		nbErreurs += reviewItemFilmOKTest ( sn,"Paul", "paul", "Jurassic Park", 5, "Je suis toujours à la recherche d'un plus grand monument du cinéma ", "6.01a", 5);
		nbTests++;
		nbErreurs += reviewItemFilmOKTest ( sn,"Antoine", "antoine", "Star Wars", 4, "Un chef d'oeuvre", "6.01b", 4);
		nbTests++;
		nbErreurs += reviewItemFilmOKTest ( sn,"Alice", "alice", "Back to the Future", 5, "J'adore ! Rendez-vous en 2015 pour retrouver les personnages dans le futur.", "6.01c", 5);
		
		// modification de la review par le même membre (nouvelle note donnée 5, moyenne attendue 5)
		nbTests++;
		nbErreurs += reviewItemFilmOKTest ( sn,"Antoine", "antoine", "Star Wars", 5, "Un chef d'oeuvre, assurément", "6.02", 5);
		
		// ajout d'une seconde review par un autre membre (note donnée 4, moyenne attendue 4.5)
		nbTests++;
		nbErreurs += reviewItemFilmOKTest ( sn,"Alice", "alice", "Star Wars", 4, "Bons fims", "6.03", 9/5);
		
		// modification de la seconde review (nouvelle note donnée 3, moyenne attendue 4)
		nbTests++;
		nbErreurs += reviewItemFilmOKTest ( sn,"Alice", "alice", "Star Wars", 3, "Sympa", "6.04", 4);

		// ajout d'une review pour un film avec un pseudo ne correspodant à aucun membre
		nbTests++;
		nbErreurs += reviewItemFilmNotMemberTest ( sn,"Lili", "alice", "Star Wars", 5, "Cool", "6.05", "L'ajout d'une review avec un pseudo qui n'est pas un membre est accepté");
		
		// ajout d'une review pour un film avec un mot de passe qui ne correspond pas au pseudo du membre
		nbTests++;
		nbErreurs += reviewItemFilmNotMemberTest ( sn,"Alice", "lili", "Star Wars", 5, "Bien", "6.06", "L'ajout d'une review avec un password qui ne correspond pas à un membre est accepté");
		
		// ajout d'une review sur un film qui n'est pas dans la base. 
		nbTests++;
		nbErreurs += reviewItemFilmNotItemTest ( sn,"Paul", "paul", "Indiana Jones", 5, "Un classique", "6.07", "L'ajout d'une review avec un pseudo qui n'est pas un membre est accepté");
		
		nbTests++;
		if (nbFilms != sn.nbFilms()) {
			System.out.println("Erreur  :  le nombre de films après utilisation de reviewItemFilm a été modifié");
			nbErreurs++;
		}
		nbTests++;
		if (nbBooks != sn.nbBooks()) {
			System.out.println("Erreur  :  le nombre de livres après utilisation de reviewItemFilm a été modifié");	
			nbErreurs++;
		}
		nbTests++;
		if (nbMembers != sn.nbMembers()) {
			System.out.println("Erreur  :  le nombre de membres après utilisation de reviewItemFilm a été modifié");	
			nbErreurs++;
		}

		// ce n'est pas du test, mais cela peut "rassurer"...
		System.out.println(sn);

		// bilan du test de addItemFilm
		System.out.println("TestsReviewItemFilm :   " + nbErreurs + " erreur(s) / " +  nbTests + " tests effectués");
		//On modifie l'argument qui sera utilisé dans le prochain test
				//Comme l'argument est de type string, on doit effectuer des conversion de type
				if ((args != null) && (args.length == 2)) {        
		            nbTests = nbTests + new Integer(args[0]);
		            nbErreurs = nbErreurs + new Integer(args[1]);       
		            args[0] = "" + nbTests;
		            args[1] = "" + nbErreurs;
		         }
	}
}